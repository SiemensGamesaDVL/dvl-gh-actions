name: 'DVLpy python package testing enironment'

description: 'A wrapper to handle default steps in building DVLpy packages.'


inputs:
  exec-shell:
    description: 'Name of the execution shell'
    default: 'bash -l {0}'
  dvlpy-environment:
    description: 'Name of the dvlpy environment'
    default: 'dvlpy'
  environment-file:
    description: 'Environment file used to install dependencies'
    required: true
  cache-number:
    description: 'Cache number for caching artifacts'
    default: 0
  python-version:
    description: 'Python version used'
    default: '3.10'
  install-package:
    description: 'Install package into environment'
    default: true
  install-requirements-only:
    description: 'Install package requirements only into environment'
    default: false
  run-tests:
    description: 'Run unit tests for this package'
    default: true
  package-variant:
    description: 'Variant of package to install'
    default: '[dev]'
  pycov-module:
    description: 'Modules for which coverage reporting is generated'
    default: 'dvl'
  package-local-deps:
    description: 'Locally cloned dependencies separated by semicolon'
    default: ''
  package-path:
    description: 'Path to the package directory'
    default: '.'
  tests-path:
    description: 'Path to the unit test directory'
    default: 'tests'
  publish-test-coverage:
    description: 'Publish test coverage details'
    default: false
  build-docs:
    description: 'Build Sphinx documentation'
    default: false
  publish-docs:
    description: 'Publish docs to gh-pages'
    default: false
  docs-deploy-token:
    description: 'Documentation deployment token'
    default: ''

runs:
  using: "composite"
  steps:
    - name: Cache conda environment
      uses: actions/cache@v3
      env:
        CACHE_NUMBER: ${{ inputs.cache-number }}
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-py-${{ inputs.python-version }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles(inputs.environment-file) }}
    - name: Setup python environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ inputs.python-version }}
        miniforge-variant: Mambaforge
        miniforge-version:  latest
        use-mamba: true
        mamba-version: "*"
        activate-environment: ${{ inputs.dvlpy-environment }}
        environment-file: ${{ inputs.environment-file }}
        channels: conda-forge
        channel-priority: strict
        use-only-tar-bz2: true
    - name: Install package
      if: inputs.install-package  == 'true'
      run: |
        echo "::group::Install package into environment"
        conda activate ${{ inputs.dvlpy-environment }}
        pkg_deps=${{ inputs.package-local-deps }}
        pkg_dep_list=($(echo ${pkg_deps} | tr ';' ' '))
        for pkg in "${pkg_dep_list[@]}" ; do
          pushd $pkg
          python -m pip install .${{ inputs.package-variant }}
          popd
        done
        cd ${{ inputs.package-path }}
        python -m pip install .${{ inputs.package-variant }}
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Install requirements only
      if: inputs.install-requirements-only == 'true'
      run: |
        echo "::group::Install package into environment"
        conda activate ${{ inputs.dvlpy-environment }}
        pkg_deps=${{ inputs.package-local-deps }}
        pkg_dep_list=($(echo ${pkg_deps} | tr ';' ' '))
        for pkg in "${pkg_dep_list[@]}" ; do
          pushd $pkg
          python -m pip install .${{ inputs.package-variant }}
          popd
        done
        cd ${{ inputs.package-path }}
        python -m pip install -r requirements.txt
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Run tests
      if: inputs.run-tests == 'true'
      run: |
        echo "::group::Install test dependencies in environment"
        conda activate ${{ inputs.dvlpy-environment }}
        mamba install pytest pytest-cov
        cd ${{ inputs.package-path }}
        echo "::endgroup::"
        pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=${{ inputs.pycov-module }} ${{ inputs.tests-path }} | tee pytest-coverage.txt
        coverage report -i
        mamba install coverage-badge
        coverage-badge -o coverage.svg -f
      shell: bash -l {0}
    - name: Unit test coverage report
      if: inputs.run-tests == 'true' && inputs.publish-test-coverage == 'true'
      uses: MishaKav/pytest-coverage-comment@v1.1.37
      id: coverageComment
      with:
        pytest-coverage-path: ${{ inputs.package-path }}/pytest-coverage.txt
        junitxml-path: ${{ inputs.package-path }}/pytest.xml
        title: Test coverage
        badge-title: dvlpy
    - name: Run Sphinx
      if: inputs.build-docs == 'true'
      run: |
        echo "::group::Install sphinx dependencies"
        conda activate dvlpy
        mamba install -c conda-forge jupyter ipython sphinx sphinx_rtd_theme nbsphinx pandoc
        cd ${{ inputs.package-path }}/docs/
        echo "::endgroup::"
        sphinx-apidoc -o source/api/ --implicit-namespaces ../dvl
        make html
        touch build/html/.nojekyll
        mv ../coverage.svg build/html
      shell: bash -l {0}
    - name: Deploy docs to Github Pages
      if: inputs.publish-docs == 'true'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        token: ${{ inputs.docs-deploy-token }}
        folder: ${{ inputs.package-path }}/docs/build/html
        single-commit: true
